{"version":3,"sources":["components/navbar.jsx","components/pages/HomePage.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","brandName","className","this","type","data-toggle","data-target","id","to","Component","HomePage","pokemon","name","weight","img","hidden","limit","search","getData","prevProps","prevState","snapshot","arr","i","length","indexOf","setState","e","target","value","onChange","handleChange","bind","map","key","src","alt","axios","get","then","data","results","clearData","url","App","path","href","rel","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4638740b.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport {Link} from \"react-router-dom\"\r\n\r\nclass NavBar extends Component {\r\n    state = {\r\n        brandName: \"PokeDex\"\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <span className=\"navbar-brand\">{this.state.brandName}</span>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbar\">\r\n                    <span className=\"navbar-toggler-icon\"/>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"navbar\">\r\n                    <div className=\"navbar-nav\">\r\n                        <Link className=\"navbar-item nav-link\" to=\"/\">Home</Link>\r\n                        <Link className=\"navbar-item nav-link\" to=\"/credits\">Credits</Link>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar\r\n","import React, {Component} from 'react'\r\nimport axios from 'axios'\r\nimport {Link} from \"react-router-dom\"\r\n\r\nimport './HomePage.scss'\r\n\r\nclass HomePage extends Component {\r\n    state = {\r\n        pokemon: [{\r\n            id: 0,\r\n            name: \"\",\r\n            weight: 0,\r\n            img: \"\",\r\n            hidden: false,\r\n        }],\r\n        limit: 18,\r\n        search: \"\",\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getData()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.search !== this.state.search) {\r\n            let arr = [...this.state.pokemon]\r\n            for (let i = this.state.pokemon.length - 1; i >= 0; i--) {\r\n                let name = this.state.pokemon[i].name\r\n\r\n                arr[i].hidden = (name.indexOf(this.state.search) === -1)\r\n            }\r\n\r\n            this.setState({arr})\r\n        }\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({\r\n            search: e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className=\"text-center\">Pokemon List</h1>\r\n\r\n                <form className=\"search-form\">\r\n                    <input\r\n                        type=\"search\"\r\n                        className=\"search-form__input\"\r\n                        onChange={this.handleChange.bind(this)}\r\n                        value={this.state.search}/>\r\n                </form>\r\n\r\n                <div className=\"row mt-2\">\r\n                    {this.state.pokemon.map((pokemon, key) => (\r\n                        <div className={pokemon.hidden ? 'd-none' : \"col-xl-2 col-lg-3 col-sm-4 col-6\"} key={key}>\r\n                            <div className=\"card pokemon\">\r\n                                <img className=\"card-img-top pokemon__img\" src={pokemon.img} alt=\"pokemon\"/>\r\n                                <div className=\"card-body pokemon-details\">\r\n                                    <h5 className=\"card-title pokemon-details__name\">{pokemon.name}</h5>\r\n                                    <p className=\"card-text pokemon-details__weight\">weight: {pokemon.weight}</p>\r\n                                    <Link className=\"btn btn-primary\" to={`/pokemon/${pokemon.id}`}>More Info</Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    getData() {\r\n        axios.get(`https://pokeapi.co/api/v2/pokemon/?limit=${this.state.limit}`)\r\n            .then(({data: {results: data}}) => {\r\n                this.clearData()\r\n\r\n                for (let i = 0; i < data.length; i++) {\r\n                    axios.get(data[i].url)\r\n                        .then(({data}) => {\r\n                            this.setState({\r\n                                pokemon: [...this.state.pokemon, {\r\n                                    id: data['id'],\r\n                                    name: data['name'],\r\n                                    weight: data['weight'],\r\n                                    img: data['sprites']['front_default'],\r\n                                }]\r\n                            })\r\n                        })\r\n                }\r\n            })\r\n    }\r\n\r\n    /* Clear Existing Data */\r\n    clearData() {\r\n        this.setState({\r\n            pokemon: []\r\n        })\r\n    }\r\n}\r\n\r\nexport default HomePage\r\n","import React from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from 'react-router-dom'\n\n// Styles\nimport './App.scss'\n\n// Components\nimport NavBar from \"./components/navbar\"\nimport HomePage from \"./components/pages/HomePage\"\n\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Router>\n                <NavBar/>\n\n                <div className=\"container-fluid\">\n                    <Switch>\n                        <Route path=\"/credits\">\n                            <div className=\"text-center\">\n                                <div className=\"d-inline-block\">\n                                    <h1>Credits</h1>\n                                    <a href=\"https://www.dafont.com/pokemon.font\"\n                                       className=\"h3 d-block\"\n                                       target=\"_blank\"\n                                       rel=\"noopener noreferrer\"\n                                    >Title font</a>\n\n                                    <a href=\"https://pokeapi.co\"\n                                       className=\"h3 d-block\"\n                                       target=\"_blank\"\n                                       rel=\"noopener noreferrer\"\n                                    >API</a>\n                                </div>\n                            </div>\n                        </Route>\n\n                        <Route path=\"/pokemon/:id\">\n                            <h1>Specific Pokemon</h1>\n                        </Route>\n\n                        <Route path=\"/\">\n                            <HomePage/>\n                        </Route>\n                    </Switch>\n                </div>\n            </Router>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}